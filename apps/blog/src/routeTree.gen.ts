/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as AdminPostsIndexImport } from './routes/admin/posts/index'
import { Route as PostsPostIdEditImport } from './routes/posts_/$postId/edit'
import { Route as AdminPostsNewImport } from './routes/admin/posts/new'
import { Route as AdminPostsPostIdImport } from './routes/admin/posts/$postId'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexRoute = PostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostsIndexRoute = AdminPostsIndexImport.update({
  path: '/admin/posts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdEditRoute = PostsPostIdEditImport.update({
  path: '/posts/$postId/edit',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostsNewRoute = AdminPostsNewImport.update({
  path: '/admin/posts/new',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostsPostIdRoute = AdminPostsPostIdImport.update({
  path: '/admin/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/$postId': {
      id: '/admin/posts/$postId'
      path: '/admin/posts/$postId'
      fullPath: '/admin/posts/$postId'
      preLoaderRoute: typeof AdminPostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/new': {
      id: '/admin/posts/new'
      path: '/admin/posts/new'
      fullPath: '/admin/posts/new'
      preLoaderRoute: typeof AdminPostsNewImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/posts/$postId/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/': {
      id: '/admin/posts/'
      path: '/admin/posts'
      fullPath: '/admin/posts'
      preLoaderRoute: typeof AdminPostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LoginRoute,
  AboutLazyRoute,
  PostsPostIdRoute,
  AdminIndexRoute,
  PostsIndexRoute,
  AdminPostsPostIdRoute,
  AdminPostsNewRoute,
  PostsPostIdEditRoute,
  AdminPostsIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/about",
        "/posts/$postId",
        "/admin/",
        "/posts/",
        "/admin/posts/$postId",
        "/admin/posts/new",
        "/posts/$postId/edit",
        "/admin/posts/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/admin/posts/$postId": {
      "filePath": "admin/posts/$postId.tsx"
    },
    "/admin/posts/new": {
      "filePath": "admin/posts/new.tsx"
    },
    "/posts/$postId/edit": {
      "filePath": "posts_/$postId/edit.tsx"
    },
    "/admin/posts/": {
      "filePath": "admin/posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
